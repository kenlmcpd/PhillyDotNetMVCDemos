Create a WebApi

=== This has been completed for you =======
	Open Visual Studio or close any other project you have open
	Create a new project (web)
	Make sure you have selected the latest version of the .net framework in the dropdown. I probably already is set
	Uncheck the Add Application Insights to the project
	Don’t worry about the name, just click OK
	Under ASP.NET 5 Templates, Select WebApi
	Click OK
==============================================

Project Review

	launchsettings.json is a little different – has api/values
	project.json has a couple different dependencies
	if we wanted this to work outside of iis, we would have to add our settings to command and in web launch settings
	Startup.cs has a lot more things
	We now have app config
	Services (AddMvc)
	We are configuring Logging, using static files and mvc
	Open the ValuesController
	Notice we have our route here
	And the methods are automatically scaffolded for us

==============================================

Run the api web application

	Because the application is set to run the url, we see the values returned by the get call
	Type http://localhost:49787/api/values/1 and we get back a single value

===============================================

Add NuGet - Entity Framework - Try to update = Hopefully everyone can do this

	If you have Internet:
	Right click on the project and select manage nuget
	Install EntityFramework.MicrosoftSqlServer
	Install EntityFramework.Commands

	If you do not have Internet:
	Open project.json
	In the dependency section add:
	"EntityFramework.Commands": "7.0.0-rc1-final",
    "EntityFramework.Core": "7.0.0-rc1-final",
    "EntityFramework.MicrosoftSqlServer": "7.0.0-rc1-final",

	Try Building

	If you fail, keep in mind we are probably offline;
	The USB memory stick has all the files you need for these excersizes
	Open the package manager console and run  
	dnu restore --ignore-failed-sources
		This will put a lock file in place and use your existing 
	

	Open Project.json
	In the commands section add
		"gen": "Microsoft.Framework.CodeGeneration",
		"ef": "EntityFramework.Commands"
	Add a new folder to the project name Models 
	Right click on Models
	Add a new class to the Model folder named DriverModel.cs
	Add using Microsoft.Data.Entity;
	Type: 
	public class DriverContext : DbContext
	{
	}

	Add the following classes to the same driver model
	
public class Vehicle
    {
        public Vehicle()
        {
            VehicleType = new VehicleType();
            VehicleMake = new VehicleMake();
        }

        public int Id { get; set; }
        public string VehicleModel { get; set; }
        public int VehicleTypeId { get; set; }
        public int VehicleMakeId { get; set; }


        public virtual VehicleType VehicleType { get; set; }
        public virtual VehicleMake VehicleMake { get; set; }        
    }

    public class VehicleType
    {
        public int Id { get; set; }
        public string VehicleTypeName { get; set; }
    }

    public class VehicleMake
    {
        public int Id { get; set; }
        public string VehicleMakeName { get; set; }
    }

    public class Driver
    {
        public Driver()
        {
            Vehicle = new Vehicle();
        }

        public int Id { get; set; }

        public string DriverName { get; set; }

        public int VehicleId { get; set; }             
        
        public virtual Vehicle Vehicle { get; set; }
    }

	Add: to DriverContext class

	public Microsoft.Data.Entity.DbSet<Vehicle> Vehicles { get; set; }
        public Microsoft.Data.Entity.DbSet<VehicleType> VehicleTypes { get; set; }
        public Microsoft.Data.Entity.DbSet<VehicleMake> VehicleMakes { get; set; }
        public Microsoft.Data.Entity.DbSet<Driver> Drivers { get; set; }

	Add this method to the DriverContext:
	
	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
	    modelBuilder.Entity<Vehicle>().Property(v => v.VehicleModel).IsRequired();
            modelBuilder.Entity<Vehicle>().Property(v => v.VehicleMakeId).IsRequired();
            modelBuilder.Entity<Vehicle>().Property(v => v.VehicleTypeId).IsRequired();

            modelBuilder.Entity<VehicleType>().Property(v => v.VehicleTypeName).IsRequired();
            modelBuilder.Entity<VehicleMake>().Property(v => v.VehicleMakeName).IsRequired();

            modelBuilder.Entity<Driver>().Property(v => v.DriverName).IsRequired();
            modelBuilder.Entity<Driver>().Property(v => v.VehicleId).IsRequired();
	}

   Create another new model named DriverInfo.cs
   Add the following
		public int DriverId { get; set; }
		public string DriverName { get; set; }
		public string VehicleType { get; set; }
		public string Manufacture { get; set; }
		public string Model { get; set; }
   Make sure your project builds!

   Register our context using Dependency Injection
		Create our connection string
	Open the appsettings.json file	
	Enter the following after the first { and before Logging

	"Data": {
		"DefaultConnection": {
		  "ConnectionString": "Server=(localdb)\\mssqllocaldb;Database=aspnet5-Excercise6_WebApi;Trusted_Connection=True;MultipleActiveResultSets=true"
		}
	  },

Open Startup
	Add:
		 using Microsoft.Data.Entity;
		 using Excercise5_WebApi.Models;
	
	Notice how appsettings is loaded in the constructor
		.AddJsonFile("appsettings.json")

	Go to the ConfigureServices section of Startup
	Add:
		services.AddEntityFramework()
		.AddSqlServer()
		.AddDbContext<DriverContext>(ef => ef.UseSqlServer(Configuration["Data:DefaultConnection:ConnectionString"]));
	
   Build to play it safe

===================================================

Now it is time to make the database

	Remember we added Entityframework.Commands in the Project.json file

	Right click on the project file
		Select open folder in file explorer
		Copy the path

	Open a command prompt (Windows-R)
		Change directory to the path you copied
		Type dnvm use  1.0.0-rc1-update1
		You should see adding path
	Type: 
		dnx ef migrations Add initial

	Type: 
		dnx ef database update

	NOTE: These commands have changed 2 times since beta

	We now have a migrations folder in the path
	Open Migrations folder, look at some of the code
	We also have a database a c:users\<username>

	In Visual Stuio: Open SQL Server Object Explorer
	Open (localdb\mssqllocaldb), under databases view tables
	
	Open LaunchSettings in properties
		Change to api/drivers
		Leave launch browser to true
		Change the name of the ValuesController to DriversController
	Add: 
		using Excercise5_WebApi.Models;
	Add: 
		private DriverContext _context;
	Add a constructor with 
		Public DriversController(DriverContext context)
		{
			_context = context;
		}

	Change the signature of the Get to public IEnumerable<DriverInfo> Get()
	Change the code in the Get method to 
		var resultSet new List<DriverInfo>();
		return restultSet;

	Add a breakpoint in the constructor
	Run the application
	Notice context has everything you need to know about your database?  
	Stop the application

	Change the code in the Get() to:
	
			var resultSet = new List<DriverInfo>();
            var drivers = _context.Drivers.ToList();

            foreach (var driver in drivers)
            {
                var vehicle = _context.Vehicles.FirstOrDefault(v => v.Id == driver.VehicleId);
                var make = _context.VehicleMakes.FirstOrDefault(v => v.Id == vehicle.VehicleMakeId);
                var vehType = _context.VehicleTypes.FirstOrDefault(v => v.Id == vehicle.VehicleMakeId);

                try
                {
                    resultSet.Add(
                        new DriverInfo
                        {
                            DriverId = driver.Id,
                            DriverName = driver.DriverName,
                            Manufacture = (make != null) ? make.VehicleMakeName : "unknown",
                            Model = (vehicle != null) ? vehicle.VehicleModel : "unknown",
                            VehicleType = (vehType != null) ? vehType.VehicleTypeName : "unknown"
                        });
                }
                catch (Exception ex)
                {
                    var badnews = ex.Message;
                }
            }
            
            return resultSet;

	Change the signature of Get(string id) from string to DriverInfo
		public DriverInfo Get(int id)

	Add this code to the method:
	
			var driver = _context.Drivers.FirstOrDefault(d => d.Id == id);
            if (driver == null) return new DriverInfo();

            var vehicle = _context.Vehicles.First(v => v.Id == driver.VehicleId);
            var vehicleMake = _context.VehicleMakes.First(v => v.Id == vehicle.VehicleMakeId);
            var vehicleType = _context.VehicleTypes.First(v => v.Id == vehicle.VehicleTypeId);

            return new DriverInfo
            {
                DriverId = driver.Id,
                DriverName = driver.DriverName,
                Manufacture = vehicleMake.VehicleMakeName,
                Model = vehicle.VehicleModel,
                VehicleType = vehicleType.VehicleTypeName
            };

	Change the signature of the Post method from string value to:
	public System.Net.HttpStatusCode Post([FromBody]DriverInfo driverInfo)
	
	Enter this code in the method:
	
			var vehicleType = new VehicleType { VehicleTypeName = driverInfo.VehicleType };
            var vehicleMake = new VehicleMake { VehicleMakeName = driverInfo.Manufacture };
            var vehicle = new Vehicle { VehicleMake = vehicleMake, VehicleModel = driverInfo.Model, VehicleType = vehicleType };
            var driver = new Driver { DriverName = driverInfo.DriverName, Vehicle = vehicle };

            _context.Drivers.Add(driver)
                .Context.Add(vehicle)
                .Context.Add(vehicleMake)
                .Context.Add(vehicleType);

            var count = _context.SaveChanges();

            return System.Net.HttpStatusCode.NoContent;
	
			

	Change the signature of the put method from string value to:
	
	public System.Net.HttpStatusCode Put(int id, [FromBody]DriverInfo driverInfo)
	
	Enter this code in the method:
	
		var driver = _context.Drivers.FirstOrDefault(d => d.Id == id);
            if (driver == null) return System.Net.HttpStatusCode.NotFound;

            var vehicle = _context.Vehicles.First(v => v.Id == driver.VehicleId);
            var vehicleMake = _context.VehicleMakes.First(v => v.Id == vehicle.VehicleMakeId);
            var vehicleType = _context.VehicleTypes.First(v => v.Id == vehicle.VehicleTypeId);

            vehicleType.VehicleTypeName = (driverInfo.VehicleType != vehicleType.VehicleTypeName) ? driverInfo.VehicleType : vehicleType.VehicleTypeName;
            vehicleMake.VehicleMakeName = (driverInfo.Manufacture != vehicleMake.VehicleMakeName) ? driverInfo.Manufacture : vehicleMake.VehicleMakeName;
            vehicle.VehicleModel = (driverInfo.Model != vehicle.VehicleModel) ? driverInfo.Model : vehicle.VehicleModel;
            driver.DriverName = (driverInfo.DriverName != driver.DriverName) ? driverInfo.DriverName : driver.DriverName;

            var count = _context.SaveChanges();

            return System.Net.HttpStatusCode.NoContent;

            
	Change the signature of the Delete Method to:
	
	public System.Net.HttpStatusCode Delete(int id)
	
	Change the code in the delete method to:
	
			var driver = _context.Drivers.FirstOrDefault(d => d.Id == id);
            if (driver == null) return System.Net.HttpStatusCode.NotFound;

            var vehicle = _context.Vehicles.First(v => v.Id == driver.VehicleId);
            var vehicleMake = _context.VehicleMakes.First(v => v.Id == vehicle.VehicleMakeId);
            var vehicleType = _context.VehicleTypes.First(v => v.Id == vehicle.VehicleTypeId);

            _context.Vehicles.Remove(vehicle);
            _context.VehicleMakes.Remove(vehicleMake);
            _context.VehicleTypes.Remove(vehicleType);
            _context.Drivers.Remove(driver);

            var count = _context.SaveChanges();
            return System.Net.HttpStatusCode.OK;
            


	Start the webApi and Open Postman
		Insert some information
		http://localhost:49787/api/drivers
		Change to Post
		Click on Body
		Change to raw
		Change to Json
	Add to the body
		{
			"DriverName": "Rob",
			"Manufacture": "Teska",
			"Model" :   "Model X",
			"VehicleType" : "Sedan"
		}
		Post the data to the database

	   Change type to get - Press Send
	   Change to get/id  (Where Id is one of your ID') - - Press Send

	Change to put – Modify the data - Press Send
	Change back to get – see the change
	Look in the database

	Review Code
	
	===========================

	Swagger has been installed for you 
	Go to: http://localhost:49787/swagger/ui/index.html  

