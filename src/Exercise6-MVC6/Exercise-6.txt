MVC6

==========================================

This has been done for you

Create A Web Application
	Open Visual studio
	Create a new project
	Select the newest version of the .net framework you have (4.6.1)
	Uncheck Add Application Insights
	Highlight ASP.NET Web Application
	Name it something
	Highlight ASP.NET 5 Preview Templates – Web Application
	Click on Change Authentication – Select Individual User Accounts
	Click Host in Cloud if you have an Azure account
	Click OK

=============================================

Review The New Look
	Open properties and Lauchsettings.json
		Look at iis settings and review how to change local port, and authentication
		Review the wwwroot and child folders, especially Lib, js and css
	Click on Home Controller
		Notice IactionResult instead of ActionResult
	Migrations – this time it is created for us
	Models – our domain models
	Services – Notice MessageServices – These are used with account
	Views – razor and Jquery – no difference
	Open Config.json – Notice we have Connection and App Settings section
	Open project.json – Notice the differences
	Open Startup – Notice the differences

==============================================

Exercise - No longer need to inherit from Controller 

	Open Home Controller
	Comment out : Controller
		Comment out all actions but Index
		Comment out return View(); in index method
		Write return new ContentResult() {Content = "THIS IS MY TEST"};
		Run application
	
	Remove all the commented code

==============================================

Exercise - Configuration with Dependency Injection

	Open appsettings.json
	Create a section named; AppSettings:
	
	"AppSettings": {
    		"SiteTitle": "Code Camp Demo",
    		"Version":  "1.0.0.1"
  	},
	Feel freee to add something else using the same json format
	Right click on Models, Add a new class named AppSettings
	Add the following properties

	public class AppSettings
   	{
    	 public string SiteTitle { get; set; }
    	 public string Version { get; set; }
		 // add others here
   	}

	Open Startup.cs
		Go to the public void ConfigureServices(IServiceCollection services)  method
		Add:
			services.Configure<AppSettings>(Configuration.GetSection("AppSettings"));

	Open the home controller
		Add:
			 using Microsoft.Extensions.OptionsModel;
			 using Demo7_MVC6.Models;
			 
		Add a constructor:

			public HomeController(IOptions<AppSettings> appSettings) 
			{
				var test = appSettings.Value.SiteTitle;
            			var test2 = test;
			}
	
	Put a breakpoint on the test2 line and run solution
	Stop from running
	
	Open the Views Folder
	Open the Shared Folder
	Open _Layout.cshtml
	
	At the top of the page add:
	
	@using Microsoft.Extensions.OptionsModel;
	@using Demo7_MVC6.Models;
	@inject IOptions<AppSettings> AppSettings
	
	Change the Title tag to:
	<title>@ViewData["Title"] - @AppSettings.Value.SiteTitle</title>
	
	Change the Page Header:
	<a asp-controller="Home" asp-action="Index" class="navbar-brand">@AppSettings.Value.SiteTitle</a>
	
	Run Project

==============================================

Exercise - Bootstrap Overview

	If not still running, run the web app
	Change the size of the web browser, to see how responsive design works

	Open _layout.cshtml
	View key class names in library
	Reminder BootStrap resides at wwwroot/lib
	Open the Home index view 
		Modify the text (User Choice in the 4 <div class="carousel-caption"> sections
		Change the button in each section to the 4 different button types
			Default, primary, success, danger

	Add a 4th Carousel screen
		Copy this html
			<li data-target="#myCarousel" data-slide-to="4"></li>
		Paste it below the third <li button.  (these are the buttons on the bottom)
		Copy the third carousel div (make sure you get all the contents)
			<div class="item"> ... </div>
		Paste it below the third div.
		Change the text in the paragraph <p> so you know it is your new one

	On bottom of the page change the column types to make it 3 columns
	within the row div  <div class="row"> 
		There are 4 columns - comment out or remove the last column
		In doing this we now have 3 blanks in the page grid, we need to fix that
		Change the remaining 3 columns to col-md-4 - this add up to the 12 columns 
		in the page grid

	Add a link to the menu
	Open Shared/_layout.cshtml
		Add Menu item and - Notice the new way of setting url  

	Review Navbar
		Highlight navbar-inverse  and cut it out. 
		Save and refresh the web page
		Paste navbar-inverse back in and remove navbar-fixed-top
		Save and refresh the page
		Put Navbar-fixed-top back

==============================================

Exercise - Tag Helpers
	If running, stop the solution
	
	Create a folder in the project named TagHelpers
	Create a class in that folder named WebsiteInformation.cs
	
	Add these using statements:
		using Demo7_MVC6.Models;
		using Microsoft.AspNet.Razor.TagHelpers;
		using Microsoft.Extensions.OptionsModel;
		
	Replace the class code with:
	
	[HtmlTargetElement("Website-Information")]
    	public class WebsiteInformation : TagHelper
    	{
        	public WebsiteInformation(IOptions<AppSettings> appSettings)
        	{
            		_appSettings = appSettings.Value;
        	}

        	private AppSettings _appSettings;

        	public override void Process(TagHelperContext context, TagHelperOutput output)
        	{
            		output.TagName = "div";    // Replaces <footer> with <div> tag
            		output.Content.SetHtmlContent(
                    		$@"&copy; {DateTime.Today.Year} - {_appSettings.SiteTitle} 
                    			<span style='color:white;'>Build: {_appSettings.Version}</span>");
            		output.TagMode = TagMode.StartTagAndEndTag;
        	}
	 }
	 
	 Open _Layout.cshtml
	 Add:
	 @addTagHelper "*, Demo7-MVC6"
	 
	 Change the footer to:
	 <footer>
                @*<p>&copy; 2016 - Demo7_MVC6</p>*@
                <website-information></website-information>
            </footer>
	 
	 Run the application
	 Look at footer, Highlight Build Info


==============================================

Exercise - Data Handling

	Copy DriverInfo.cs file from Exercise5 and paste it to the ViewModels Folder
	Change the namespace to Demo7_MVC6.ViewModels

	Copy the DriversModel.cs file from Exercise5 and paste it to the Models folder
	change the namespace to Demo7_MVC6.Models

	Since the main DbContext is now ApplicationDbContext, 
	Cut the driver context code to ApplicationDb Context
	Cut the four Dbset's and paste..
		public Microsoft.Data.Entity.DbSet<Vehicle> Vehicles { get; set; }
        public Microsoft.Data.Entity.DbSet<VehicleType> VehicleTypes { get; set; }
        public Microsoft.Data.Entity.DbSet<VehicleMake> VehicleMakes { get; set; }
        public Microsoft.Data.Entity.DbSet<Driver> Drivers { get; set; }

	Cut the insides of OnModelCreating and paste into ApplicationDbContext's OnModelCreating...
			modelBuilder.Entity<Vehicle>().Property(v => v.VehicleModel).IsRequired();
            modelBuilder.Entity<Vehicle>().Property(v => v.VehicleMakeId).IsRequired();
            modelBuilder.Entity<Vehicle>().Property(v => v.VehicleTypeId).IsRequired();

            modelBuilder.Entity<VehicleType>().Property(v => v.VehicleTypeName).IsRequired();
            modelBuilder.Entity<VehicleMake>().Property(v => v.VehicleMakeName).IsRequired();

            modelBuilder.Entity<Driver>().Property(v => v.DriverName).IsRequired();
            modelBuilder.Entity<Driver>().Property(v => v.VehicleId).IsRequired();

    Rename the builder variable to modelBuilder
	also change base.OnModelCreating(modelBuilder);

	Delete the rest remaining DriverContext class out of DriverModel.cs


	Copy over the API controller into the controllers folder
		Rename the namespace 
		Make sure the class name and constructor are also DriversApiController
		Remove the using Excercise5_WebApi.Models; reference
		Add using Demo7_MVC6.Models;
		Add using Demo7_MVC6.ViewModels;
		Make sure the base route is api/Drivers
		
		Change DriversContext to ApplicationDbContext
	Build to play it safe

	Time to make the database
		Note Entityframework.Commands were already added for us
	Right click on the project file
	Select open folder in file explorer
	Copy the path
	Open a command prompt (Windows-R)
	Change directory to the path you copied
	Type:
		 dnvm use  1.0.0-rc1-update1
	You should see adding path
	Type: 
		dnx ef migrations Add initial
	Type: 
		dnx ef database update

	Notice the database at c:users\<username>
	Open SQL Server Object Explorer
	Open (localdb\mssqllocaldb), under databases show tables
	Run Application
	Run Postman with new url and input some data
		 Add Drivers Controller

	Right click on the HomeController, copy it and paste it to create new controller
	Rename the copied version to DriversController.cs
	Rename the class and constructor to DriversController
	Delete the About, Contact and Error methods
	Copy the Home View Folder and paste it back to the Views folder
	Rename it to Drivers
	Open the Drivers/index view
	Delete all the body content (Leave the @{ ViewData["Title".....)
	Replace with


<div class="row">
    <br />
</div>
<div class="container">
    <div class="row spacer25">
        <div class="col-md-3">
            <a class="btn btn-primary" id="PostFormBtn">Show Post Form</a>
        </div>
        <div class="col-md-3">
            <a class="btn btn-primary" id="PutFormBtn">Show Put Form</a>
        </div>
        <div class="col-md-3">
            <a class="btn btn-primary" id="GetFormBtn">Show Get Form</a>
        </div>
        <div class="col-md-3">
            <a class="btn btn-primary" id="DelFormBtn">Show Delete Form</a>
        </div>
    </div>
</div>

<div class="container spacer25">
    <form id="PostForm">
        <div class="row">
            <div class="col-md-4 align-right"> </div>
            <div class="col-md-4">
                <h1>Post Data To Api</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right">Driver Name:</div>
            <div class="col-md-4">
                <input type="text" id="postdrivername" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right">Vehicle Type:</div>
            <div class="col-md-4">
                <input type="text" id="posttype" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right spacer10">Manufacture:</div>
            <div class="col-md-4 spacer10">
                <input type="text" id="postmanufacture" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right spacer10">Model:</div>
            <div class="col-md-4 spacer10">
                <input type="text" id="postmodel" />
            </div>
        </div>
        <div class="row">
            <div id="PostMessage" class="col-md-4"> </div>
            <div class="col-md-4 align-right spacer25">
                <input class="btn btn-success" type="button" id="postsubmit" value="Post Data to Api" />
            </div>
        </div>
    </form>
</div>

<div class="container spacer" id="PutForm">
    <form id="PostForm">
        <div class="row">
            <div class="col-md-4 align-right"> </div>
            <div class="col-md-4">
                <h1>Put Data To Api</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right">DriverId:</div>
            <div class="col-md-4">
                <input type="text" id="putdriverid" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right">Driver Name:</div>
            <div class="col-md-4">
                <input type="text" id="putdrivername" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right">Vehicle Type:</div>
            <div class="col-md-4">
                <input type="text" id="puttype" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right spacer10">Manufacture:</div>
            <div class="col-md-4 spacer10">
                <input type="text" id="putmanufacture" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right spacer10">Model:</div>
            <div class="col-md-4 spacer10">
                <input type="text" id="putmodel" />
            </div>
        </div>
        <div class="row">
            <div id="PutMessage" class="col-md-4"> </div>
            <div class="col-md-4 align-right spacer25">
                <input class="btn btn-success" type="button" id="putsubmit" value="Put Data to Api" />
            </div>
        </div>
    </form>
</div>


<div class="container spacer" id="GetForm">
    <div class="row">
        <div class="col-md-4 align-right"> </div>
        <div class="col-md-4">
            <h1>Get Data From Api</h1>
        </div>
    </div>
    <div id="getresult"></div>
</div>

<div class="container spacer" id="DelForm">
    <form id="DeleteForm">
        <div class="row">
            <div class="col-md-4 align-right"> </div>
            <div class="col-md-4">
                <h1>Delete Data From Api</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 align-right">DriverId:</div>
            <div class="col-md-4">
                <input type="text" id="deletedriverid" />
            </div>
        </div>
        <div class="row">
            <div id="deleteMessage" class="col-md-4"> </div>
            <div class="col-md-4 align-right spacer25">
                <input class="btn btn-success" type="button" id="deletesubmit" value="Delete Data from Api" />
            </div>
        </div>
    </form>
</div>


@section scripts
{
    <script>

        $(document).ready(function() {

            hideall();

            $("#PostFormBtn").click(function() {
                hideall();
                $("#postdrivername").val('');
                $('#posttype').val('');
                $('#postmanufacture').val('');
                $('#postmodel').val('');
                $("#PostForm").show(600);
            });

            $("#PutFormBtn").click(function() {
                hideall();
                $("#putdriverid").val('');
                $("#putdrivername").val('');
                $('#puttype').val('');
                $('#putmanufacture').val('');
                $('#putmodel').val('');
                $("#PutForm").show(600);
            });

            $("#GetFormBtn").click(function() {
                hideall();
                $("#getresult").html('');
                $("#GetForm").show(600);

                $.get("/api/drivers", function (data) {
                    $.each(data, function() {
                        $("#getresult").append("<br/> (" + this.DriverId + ") " + this.DriverName + " drives a " +
                            this.Manufacture + ", " + this.Model + " which is a " +
                            this.VehicleType + "<hr/>");
                    });
                });
            });

            $("#DelFormBtn").click(function() {
                hideall();
                $("#DelForm").show(600);
            });

            $('#postsubmit').click(function() {

                var driverInfo =
                {
                    DriverName : $('#postdrivername').val(),
                    VehicleType: $('#posttype').val(),
                    Manufacture: $('#postmanufacture').val(),
                    Model: $('#postmodel').val()
                }

                 $.ajax({
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8', 
                    url: '/api/drivers',
                    type: 'Post',
                    data: JSON.stringify(driverInfo),
                    success: function (data) {
                        $('#PostMessage').append("<h3>Driver Saved</h3>");
                    },
                    error: function (request, status, error) {
                        $('#PostMessage').append("<h3>Failed to save data</h3>");
                    }                    
                });               
            });

            $('#putsubmit').click(function () {

                var driverInfo =
                {
                    DriverId: $('#putdriverid').val(),
                    DriverName: $('#putdrivername').val(),
                    VehicleType: $('#puttype').val(),
                    Manufacture: $('#putmanufacture').val(),
                    Model: $('#putmodel').val()
                }

                $.ajax({
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    url: '/api/drivers/' + $('#putdriverid').val(),
                    type: 'Put',
                    data: JSON.stringify(driverInfo),
                    success: function (data) {
                        $('#PutMessage').append("<h3>Driver updated</h3>");
                    },
                    error: function (request, status, error) {
                        $('#PutMessage').append("<h3>Failed to update data</h3>");
                    }
                });
            });

            $('#deletesubmit').click(function () {
                                
                $.ajax({
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    url: '/api/drivers/' + $('#deletedriverid').val(),
                    type: 'Delete',
                    success: function (data) {
                        $('#deleteMessage').append("<h3>Driver deleted</h3>");
                    },
                    error: function (request, status, error) {
                        $('#deleteMessage').append("<h3>Failed to delete data</h3>");
                    }
                });
            });
        });

        function hideall() {
            $('#PostForm').hide(600);
            $('#PutForm').hide(600);
            $('#GetForm').hide(600);
            $('#DelForm').hide(600);
        }


    </script>
}





	Open Views/Shared/_layout
	Modify the last menu item to go to your new Drivers/index page
	Run and test the application
	Create a Driver
	Update a Driver
	Delete a Driver

==============================================

Exercise - Identity and Authorization
	
	Add identity to DriversApi.cs
		Add  using Microsoft.AspNet.Authorization;
		Add [Authorize] above the class
		Add [AllowAnonymous] above both Gets()

	Run the application
	Try doing a Post or Put
	Login / Create a user
	Retest the create and update api

==============================================

Exercise - Action Logging Filter

	Right click on the Services folder
		Click add, new class
		Name the new class LoggingFilter

	Open Startup.cs
		Go the ConfigureServices method
		Add:
			services.AddLogging();            
            services.AddSingleton<ILoggingFilter, LoggingFilter>();

	Open the HomeController
		Add:
			using Demo7_MVC6.Services;

		Add this attribute above the class name
			[ServiceFilter(typeof(ILoggingFilter))]

	Go back to the LoggingFilter class
		Add:
			using Microsoft.AspNet.Mvc.Filters;
			using Microsoft.Extensions.Logging;
	
		Replace the namespace and class with:

		namespace Demo7_MVC6.Services
{
    public interface ILoggingFilter
    {

    }
    public class LoggingFilter : ActionFilterAttribute, ILoggingFilter
    {
        private ILogger _logger;
        public LoggingFilter(ILogger<LoggingFilter> logger)
        {
            _logger = logger;
        }

        public override void OnActionExecuting(ActionExecutingContext actionContext)
        {
            var controllerName = actionContext.RouteData.Values["controller"];
            var actionName = actionContext.RouteData.Values["action"];
            var controller = actionContext.Controller;
            var http = actionContext.HttpContext;
            var ip = http.Connection.RemoteIpAddress;
            _logger.LogDebug("Startup info");
        }

        public override void OnActionExecuted(ActionExecutedContext actioncContext)
        {
            _logger.LogDebug("Log Completion info");
        }
    }
}

==============================================

Exercise - Rob Add Bower and Gulp





